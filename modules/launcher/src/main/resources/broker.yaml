# Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
#
# WSO2 Inc. licenses this file to you under the Apache License,
# Version 2.0 (the "License"); you may not use this file except
# in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# Broker configurations
ballerina.broker:
 # When the in-memory mode is enabled all message and context data including durable entities are held in memory.
 # Please note that this can increase memory usage of the broker. Therefore it is advised to allocate more memory in
 # the JVM which run the broker.
 enableInMemoryMode: false

 # Datasource configurations used to communicate with the database.
 dataSource:
  # Database URL.
  url: jdbc:h2:./database/MB_DB
  # Database username.
  user: wso2carbon
  # Database password.
  password: wso2carbon

# Broker core configurations.
ballerina.broker.core:
 # Maximum number of messages kept in a non-durable queue. Increasing this number can increase the memory consumption.
 # Messages published to queue are dropped after this limit is reached.
 nonDurableQueueMaxDepth: 10000

 # Maximum number of messages cached in-memory for faster delivery. Increasing this number can result in better
 # performance while increasing the memory consumption.
 durableQueueInMemoryCacheLimit: 10000

 # Configuration related to message delivery task
 deliveryTask:
  # Number of concurrent workers used to process the delivery tasks.
  workerCount: 5
  # The time that the delivery task will wait when the queue is empty or no consumers are available for message
  # delivery in milliseconds.
  idleTaskDelay: 50

# Broker auth related configurations.
ballerina.broker.auth:
 # Broker authentication related configurations.
 authentication:
  # Enable the authentication
  enabled: true
  authenticator:
    # Authenticator implementation
    className: io.ballerina.messaging.broker.auth.authentication.authenticator.JaasAuthenticator
    # Optional properties
    properties:
     loginModule: io.ballerina.messaging.broker.auth.authentication.jaas.UserStoreLoginModule
 # Broker authorization related configurations.
 authorization:
  # Enable the authorization
  enabled: false

  # User store used tot lookup user groups that a user belongs.
  userStore:
   # User store implementing class
   className: io.ballerina.messaging.broker.auth.authorization.provider.FileBasedUserStore

  # Configurations related to MAC handler.
  mandatoryAccessController:
   # MAC handler implementation.
   className: io.ballerina.messaging.broker.auth.authorization.provider.DefaultMacHandler

  # Configurations related to DAC handler.
  discretionaryAccessController:
   className: io.ballerina.messaging.broker.auth.authorization.provider.RdbmsDacHandler

  cache:
   # Cache timeout in Minutes
   timeout: 15
   # Maximum Cache size to hold user id
   size: 5000

# AMQP transport related configurations.
ballerina.broker.transport.amqp:
 # Hostname configuration used in creating the server socket
 hostName: localhost

 # Maximum number of redeliveries before publishing a message to the DLX (dead letter exchange).
 maxRedeliveryCount: 5

 # Publisher flow control related configs.
 channelFlow:
  # The low limit used to enable channel flow when it is disabled. Value corresponds to the number of messages.
  lowLimit: 100
  # The high limit used to disable channel flow when it is enabled. Value corresponds to the number of messages.
  highLimit: 1000

 # Nonsecured transport configurations.
 plain:
  # Port used for the nonsecured transport.
  port: 5672

 # Secured transport configuration.
 ssl:
  # Indicate if secured transport is enabled. Accepted values are 'true' or 'false'.
  enabled: true
  # Port used to bind the secured transport.
  port: 8672
  # Secure protocol used to encrypt data.
  protocol: TLS

  # Keystore configurations used in creating the secure transport.
  keyStore:
   # Type of the keystore file.
   type: JKS
   # Location of the keystore file. The path can be relative to broker home or absolute path.
   location: resources/security/keystore.jks
   # Keystore password.
   password: wso2carbon
   # Cert type used in the keystore file.
   certType: SunX509

  # Truststore configurations used in creating the secure transport.
  trustStore:
   # Type of truststore file.
   type: JKS
   # Location of the keystore file. The path can be relative to broker home or absolute path.
   location: resources/security/client-truststore.jks
   # Truststore password.
   password: wso2carbon
   # Cert type used in the truststore file
   certType: SunX509

# Failover related configurations
ballerina.broker.failover:
 # Whether or not failover is enabled
 enabled: false

# This is the main configuration for metrics
wso2.metrics:
 # Enable Metrics
 enabled: true

 # Metrics JMX Configuration
 jmx:
  # Register MBean when initializing Metrics
  registerMBean: true
  # MBean Name
  name: org.wso2.carbon:type=Metrics

 # Metrics reporting configurations
 # The JMX, Console, CSV and SLF4J reporters are in the Metrics Core feature.
 reporting:
  jmx:
   - # The name for the JMX Reporter
     name: JMX
     # Enable JMX Reporter
     enabled: true
     # Metrics domain used to report metrics
     domain: io.ballerina.messaging.broker

  slf4j:
   - # The name for the SLF4J Reporter
     name: SLF4J
     # Enable SLF4J Reporter
     enabled: false
     # The Logger name
     loggerName: io.ballerina.messaging.broker.MetricsLogger
     # The Marker name
     # markerName: metrics
     # Polling Period in seconds.
     # This is the period for polling metrics from the metric registry and logging to the configured logger
     pollingPeriod: 60

ballerina.broker.trace:

 enabled: true
 tracers:
   - name: jaeger
     enabled: true
     className: io.ballerina.messaging.broker.observe.trace.extension.jaeger.OpenTracingExtension
     configuration:
       sampler.type: const
       sampler.param: 1
       reporter.log.spans: true
       reporter.hostname: localhost
       reporter.port: 5775
       reporter.flush.interval.ms: 1000
       reporter.max.buffer.spans: 1000
